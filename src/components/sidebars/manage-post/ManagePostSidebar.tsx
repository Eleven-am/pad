"use client";

import React, {useCallback, useMemo} from "react";
import {Button} from "@/components/ui/button";
import {Save} from "lucide-react";
import {User} from "better-auth";
import {useMenu} from "@/components/menu";
import {useBlockPostActions, useBlockPostState} from "@/commands/CommandManager";
import {ClientExcerptGenerator} from "@/lib/client-excerpt-generator";

import {ScrollableContent, SidebarContainer, SidebarHeader} from "../shared/sidebar-components";
import {BlogMetadataSection} from "./components/BlogMetadataSection";
import {CategorySection} from "./components/CategorySection";
import {TagsSection} from "./components/TagsSection";
import {ExcerptSection} from "./components/ExcerptSection";
import {ProgressTrackerSection} from "./components/ProgressTrackerSection";
import {PublishingSection} from "./components/PublishingSection";

import {usePostForm} from "./hooks/usePostForm";
import {useCategoryManagement} from "./hooks/useCategoryManagement";
import {useTagManagement} from "./hooks/useTagManagement";
import {useProgressTracker} from "./hooks/useProgressTracker";
import {usePostActions} from "./hooks/usePostActions";

export const ManagePostSidebar = React.memo<{ user: User }> (({user}) => {
	const {setBlocksSubPanel} = useMenu ();
	
	const {post, categories, tags, hasBlocks, tracker, blocks} = useBlockPostState ((state) => ({
		post: state.post,
		categories: state.categories,
		tags: state.tags,
		hasBlocks: state.blocks.length > 0,
		tracker: state.tracker,
		blocks: state.blocks
	}));
	
	const {
		updatePost,
		publishPost,
		schedulePost,
		createCategory,
		createTag,
		updatePostTags,
		updateProgressTracker
	} = useBlockPostActions ();
	
	// Form state management
	const [formState, formActions] = usePostForm (post);
	
	// Category management
	const categoryManagement = useCategoryManagement (formActions.setCategory);
	
	// Tag management
	const tagManagement = useTagManagement (
		tags,
		formState.selectedTags,
		formActions.setSelectedTags,
		createTag,
		updatePostTags,
		user.id
	);
	
	// Progress tracker management
	const progressTracker = useProgressTracker (
		tracker,
		post?.id,
		updateProgressTracker
	);
	
	// Calculate auto-generated excerpt data for save operations
	const autoGeneratedData = useMemo(() => {
		if (blocks.length > 0) {
			return ClientExcerptGenerator.generateExcerpt(blocks, 200);
		}
		return { text: '', imageFileId: undefined, wordCount: 0 };
	}, [blocks]);
	
	// Check if user is in manual excerpt mode
	const useManualExcerpt = Boolean(formState.excerpt || formState.excerptImageId || formState.excerptByline);
	
	// Create enhanced form state for saving that includes auto-generated data when needed
	const saveFormState = useMemo(() => ({
		...formState,
		// Use auto-generated data when not in manual mode
		excerpt: useManualExcerpt ? formState.excerpt : autoGeneratedData.text,
		excerptImageId: useManualExcerpt ? formState.excerptImageId : (autoGeneratedData.imageFileId || ''),
		excerptByline: useManualExcerpt ? formState.excerptByline : ''
	}), [formState, useManualExcerpt, autoGeneratedData]);

	// Post actions
	const postActions = usePostActions (
		post,
		user.id,
		saveFormState,
		updatePost,
		publishPost,
		schedulePost,
		setBlocksSubPanel
	);
	
	// Event handlers with proper memoization
	const handleBlogNameChange = useCallback ((e: React.ChangeEvent<HTMLTextAreaElement>) => {
		formActions.setBlogName (e.target.value);
	}, [formActions]);
	
	// Excerpt handlers
	const handleExcerptChange = useCallback ((excerpt: string) => {
		formActions.setExcerpt (excerpt);
	}, [formActions]);
	
	const handleExcerptImageChange = useCallback ((imageId: string) => {
		formActions.setExcerptImageId (imageId);
	}, [formActions]);
	
	const handleExcerptBylineChange = useCallback ((byline: string) => {
		formActions.setExcerptByline (byline);
	}, [formActions]);
	
	const handleCategorySubmit = useCallback (async (e: React.FormEvent) => {
		await categoryManagement.handleCategorySubmit (e, createCategory);
	}, [categoryManagement, createCategory]);
	
	const handleCancelNewCategory = useCallback (() => {
		categoryManagement.hideCategoryInput ();
	}, [categoryManagement]);
	
	return (
		<SidebarContainer>
			<SidebarHeader
				title="Manage Post"
			>
				<Button
					variant="outline"
					size="sm"
					onClick={postActions.handleSave}
					className="flex items-center gap-2"
					disabled={ ! post}
				>
					<Save className="h-4 w-4"/>
					Save Changes
				</Button>
			</SidebarHeader>
			
			<ScrollableContent className="m-4 space-y-4">
				<BlogMetadataSection
					blogName={formState.blogName}
					onBlogNameChange={handleBlogNameChange}
				/>
				
				<CategorySection
					category={formState.category}
					categories={categories}
					showNewCategoryInput={categoryManagement.showNewCategoryInput}
					newCategory={categoryManagement.newCategory}
					onCategoryChange={categoryManagement.handleCategoryChange}
					onNewCategoryChange={categoryManagement.setNewCategory}
					onCategorySubmit={handleCategorySubmit}
					onCancelNewCategory={handleCancelNewCategory}
				/>
				
				<TagsSection
					tagOptions={tagManagement.tagOptions}
					selectedTags={formState.selectedTags}
					onTagsChange={tagManagement.handleTagsChange}
					onCreateTag={tagManagement.handleCreateTag}
					onTagsClose={tagManagement.handleTagsClose}
				/>
				
				<ExcerptSection
					excerpt={formState.excerpt}
					excerptImageId={formState.excerptImageId}
					excerptByline={formState.excerptByline}
					postTitle={formState.blogName || post?.title}
					postSlug={post?.slug}
					onExcerptChange={handleExcerptChange}
					onExcerptImageChange={handleExcerptImageChange}
					onExcerptBylineChange={handleExcerptBylineChange}
					blocks={blocks}
				/>
				
				<ProgressTrackerSection
					variant={progressTracker.state.variant}
					showPercentage={progressTracker.state.showPercentage}
					onVariantChange={progressTracker.actions.setVariant}
					onShowPercentageChange={progressTracker.actions.setShowPercentage}
				/>
				
				<PublishingSection
					isDraft={formState.isDraft}
					isPublished={post?.published || false}
					scheduledDate={formState.scheduledDate}
					publishedAt={post?.publishedAt}
					hasBlocks={hasBlocks}
					onDraftModeChange={formActions.setIsDraft}
					onScheduledDateChange={formActions.setScheduledDate}
					onStartAddingBlocks={postActions.handleStartAddingBlocks}
					onPublish={postActions.handlePublish}
					onSchedulePublish={postActions.handleSchedulePublish}
				/>
			</ScrollableContent>
		</SidebarContainer>
	);
});

ManagePostSidebar.displayName = 'ManagePostSidebar';

// Export for backward compatibility
export const ManagePost = ManagePostSidebar;